const createThingArrayResolver=require("./createThingArrayResolver"),createThingScalarResolver=require("./createThingScalarResolver"),composeThingResolvers=a=>{const{duplexFields:b,relationalFields:c}=a;if(!c&&!b)throw new TypeError("Expected an array as a value of the relationalFields key of thingConfig");const d={};return c&&c.reduce((a,{array:b,name:c,config:d})=>{if(b){const b=createThingArrayResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}else{const b=createThingScalarResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}return a},d),b&&b.reduce((a,{array:b,name:c,config:d})=>{if(b){const b=createThingArrayResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}else{const b=createThingScalarResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}return a},d),d};module.exports=composeThingResolvers;