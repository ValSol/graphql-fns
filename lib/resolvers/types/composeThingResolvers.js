const createThingArrayResolver=require("./createThingArrayResolver"),createThingScalarResolver=require("./createThingScalarResolver"),pointFromMongoToGql=require("./pointFromMongoToGql"),polygonFromMongoToGql=require("./polygonFromMongoToGql"),composeThingResolvers=a=>{const{duplexFields:b,geospatialFields:c,relationalFields:d}=a,e={};return d&&d.reduce((a,{array:b,name:c,config:d})=>{if(b){const b=createThingArrayResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}else{const b=createThingScalarResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}return a},e),b&&b.reduce((a,{array:b,name:c,config:d})=>{if(b){const b=createThingArrayResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}else{const b=createThingScalarResolver(d);// eslint-disable-next-line no-param-reassign
a[c]=b}return a},e),c&&c.reduce((a,{name:b,array:c,type:d})=>{return a[b]=a=>{if(c){const c=a[b];if(!c||!c.length)return[];if(console.log("*************************************"),console.log("values =",JSON.stringify(c,null," ")),console.log("*************************************"),"Point"===d)return c.map(a=>pointFromMongoToGql(a));if("Polygon"===d)return c.map(a=>polygonFromMongoToGql(a));throw new TypeError(`Invalid type value "${b}" of geospatial mongodb field!`)}const e=a[b];if(!e||!e.type)return null;if("Point"===d)return pointFromMongoToGql(e);if("Polygon"===d)return polygonFromMongoToGql(e);throw new TypeError(`Invalid type value "${b}" of geospatial mongodb field!`)},a},e),e};module.exports=composeThingResolvers;