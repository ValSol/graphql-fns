const createThingSchema=require("../../mongooseModels/createThingSchema"),getProjectionFromInfo=require("../getProjectionFromInfo"),composeNearInput=require("./composeNearInput"),composeSortInput=require("./composeSortInput"),createThingsQueryResolver=(a,b)=>{const{enums:c}=b;return async(b,d,e,f)=>{const{near:g,pagination:h,sort:i,where:j}=d,{mongooseConn:k}=e,l=createThingSchema(a,c),{name:m}=a,n=k.model(m,l),o=g&&composeNearInput(g),p=getProjectionFromInfo(f);let q=n.find(o||j||{},p,{lean:!0});if(i){const{sortBy:a}=i,b=composeSortInput(a);b.forEach(a=>q.sort(a))}if(h){const{skip:a,first:b}=h;q=q.skip(a).limit(b)}const r=await q.exec();if(!r)return[];const s=r.map(a=>{const{_id:b}=a;return{...a,id:b}});return s}};module.exports=createThingsQueryResolver;