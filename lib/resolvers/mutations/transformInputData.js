const{Types}=require("mongoose"),transformInputData=(a,b,// use mongoose Types in args to let mocking the ObjectId() in tests
c=Types)=>{const d=[],e=[{data:{...a,_id:c.ObjectId()},config:b}],f=(a,b)=>{const{embeddedFields:d,relationalFields:g}=b,h={};g&&g.reduce((a,{name:b,array:c,config:d})=>(a[b]={array:c,config:d},a),h);const i={};return d&&d.reduce((a,{name:b,config:c})=>(a[b]=c,a),i),Object.keys(a).reduce((b,d)=>{if(!h[d])b[d]=i[d]?// eslint-disable-next-line no-param-reassign
f(a[d],i[d]):// eslint-disable-next-line no-param-reassign
a[d];else if(a[d].connect)b[d]=a[d].connect;else if(a[d].create)if(h[d].array){const f=[];a[d].create.forEach(a=>{// eslint-disable-next-line no-underscore-dangle
const b=c.ObjectId();f.push(b),e.push({data:{...a,_id:b},config:h[d].config})}),b[d]=f}else{// eslint-disable-next-line no-underscore-dangle
const f=c.ObjectId();e.push({data:{...a[d].create,_id:f},config:h[d].config}),b[d]=f}return b},{})};for(;e.length;){const{data:a,config:b}=e.shift();d.push({config:b,data:f(a,b)})}return d};module.exports=transformInputData;