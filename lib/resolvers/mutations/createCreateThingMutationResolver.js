const fs=require("fs"),createThingSchema=require("../../mongooseModels/createThingSchema"),transformInputData=require("./transformInputData"),createCreateThingMutationResolver=a=>{return async(b,c,d,e)=>{const{data:f}=c,{mongooseConn:g}=d,h=transformInputData(f,a),{name:i}=a,j=createThingSchema(a),k=g.model(i,j);let l;if(1===h.length){const a=await k.create(h[0].data);l=a.toObject()}else{const a=new Map;h.reduce((b,{config:c,data:d})=>{const e={insertOne:{document:d}};return a.get(c)?a.get(c).push(e):a.set(c,[e]),b},a);const b=[];a.forEach((a,c)=>{const{name:d}=c,e=createThingSchema(c),f=g.model(d,e);b.push(f.bulkWrite(a))}),await Promise.all(b);// eslint-disable-next-line no-underscore-dangle
const c=await k.findById(h[0].data._id);l=c.toObject()}const m="***************************************\n",n=`${m}${JSON.stringify(c,null," ")}\n${m}${JSON.stringify(l,null," ")}\n${m}${e}\n${m}${JSON.stringify(e,null," ")}\n${m}`;fs.writeFileSync("create-thing.log",n);const{_id:o}=l;return l.id=o,l}};module.exports=createCreateThingMutationResolver;