const createThingSchema=require("../../mongooseModels/createThingSchema"),processCreateInputData=require("./processCreateInputData"),updatePeriphery=require("./updatePeriphery"),createCreateThingMutationResolver=a=>{return async(b,c,d)=>{const{data:e}=c,{mongooseConn:f}=d,{core:g,periphery:h,single:i,first:j}=processCreateInputData(e,a),{name:k}=a,l=createThingSchema(a),m=f.model(k,l);await updatePeriphery(h,f);let n;if(i){const a=await m.create(j);n=a.toObject()}else{const a=[];g.forEach((b,c)=>{const{name:d}=c,e=createThingSchema(c),g=f.model(d,e);a.push(g.bulkWrite(b))}),await Promise.all(a),n=await m.findById(j._id,null,{lean:!0})}const{_id:o}=n;return n.id=o,n}};module.exports=createCreateThingMutationResolver;