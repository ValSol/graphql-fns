const fs=require("fs"),createThingSchema=require("../../mongooseModels/createThingSchema"),transformInputData=require("./transformInputData"),updatePeriphery=require("./updatePeriphery"),createCreateThingMutationResolver=a=>{return async(b,c,d,e)=>{const{data:f}=c,{mongooseConn:g}=d,{core:h,periphery:i,single:j,first:k}=transformInputData(f,a),{name:l}=a,m=createThingSchema(a),n=g.model(l,m);await updatePeriphery(i,g);let o;if(j){const a=await n.create(k);o=a.toObject()}else{const a=[];h.forEach((b,c)=>{const{name:d}=c,e=createThingSchema(c),f=g.model(d,e);a.push(f.bulkWrite(b))}),await Promise.all(a);// eslint-disable-next-line no-underscore-dangle
const b=await n.findById(k._id);o=b.toObject()}const p="***************************************\n",q=`${p}${JSON.stringify(c,null," ")}\n${p}${JSON.stringify(o,null," ")}\n${p}${e}\n${p}${JSON.stringify(e,null," ")}\n${p}`;fs.writeFileSync("create-thing.log",q);const{_id:r}=o;return o.id=r,o}};module.exports=createCreateThingMutationResolver;