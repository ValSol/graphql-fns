const checkInventory=require("../../utils/checkInventory"),createThingSchema=require("../../mongooseModels/createThingSchema"),processCreateInputData=require("./processCreateInputData"),updatePeriphery=require("./updatePeriphery"),createCreateThingMutationResolver=(a,b)=>{const{enums:c,inventory:d}=b,{name:e}=a;if(!checkInventory(["Mutation","createThing",e],d))return null;return async(b,f,g)=>{const{data:h}=f,{mongooseConn:i}=g,{core:j,periphery:k,single:l,first:m}=processCreateInputData(h,a),n=createThingSchema(a,c),o=i.model(e,n);await updatePeriphery(k,i);let p;if(l){const a=await o.create(m);p=a.toObject()}else{const a=[];j.forEach((b,d)=>{const{name:e}=d,f=createThingSchema(d,c),g=i.model(e,f);a.push(g.bulkWrite(b))}),await Promise.all(a),p=await o.findById(m._id,null,{lean:!0})}const{_id:q}=p;if(p.id=q,checkInventory(["Subscription","newThing",e],d)){const{pubsub:a}=g;if(!a)throw new TypeError("Context have to have pubsub for subscription!");// to prevent flowjs error
a.publish(`new-${e}`,{[`new${e}`]:p})}return p}};module.exports=createCreateThingMutationResolver;