const createThingSchema=require("../../mongooseModels/createThingSchema"),processUpdateInputData=require("./processUpdateInputData"),processDeleteData=require("./processDeleteData"),updatePeriphery=require("./updatePeriphery"),createUpdateThingMutationResolver=a=>{return async(b,c,d)=>{const{mongooseConn:e}=d,{where:f,where:{id:h},data:g}=c,{name:i,duplexFields:j}=a,k=createThingSchema(a),l=e.model(i,k),m=j?j.reduce((a,{name:b})=>(g[b]&&(a[b]=1),a),{}):{};let n,o=h;// eslint-disable-line no-underscore-dangle
if(Object.keys(m).length){const b=h?{_id:o}:f,c=await l.findOne(b,m,{lean:!0}),d={...g,_id:o},i=processDeleteData(c,a),{core:j,periphery:k}=processUpdateInputData(d,a,i);await updatePeriphery(k,e);const p=[];// $FlowFixMe
j.forEach((a,b)=>{const{name:c}=b,d=createThingSchema(b),f=e.model(c,d);p.push(f.bulkWrite(a))}),await Promise.all(p),n=await l.findOneAndUpdate({_id:o},g,{new:!0,lean:!0})}else if(h)o=h,n=await l.findOneAndUpdate({_id:o},g,{new:!0,lean:!0});else{if(n=await l.findOneAndUpdate(f,g,{new:!0,lean:!0}),!n)return null;o=n._id}return n.id=o,n}};module.exports=createUpdateThingMutationResolver;