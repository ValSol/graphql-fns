const processCreateInputData=(a,b,c=new Map)=>{const{duplexFields:d}=b,e=new Map,f={};return d&&d.reduce((a,{name:b,oppositeName:c,array:d,config:e})=>{if(!e.duplexFields)throw new TypeError("Expected a duplexFields in config!");const f=e.duplexFields.find(({name:a})=>a===c);if(!f)throw new TypeError(`Expected a duplexField with name "${c}"!`);const{array:g,config:h}=f;// eslint-disable-next-line
return a[b]={array:d,config:e,oppositeArray:g,oppositeConfig:h,oppositeName:c},a},f),Object.keys(a).forEach(b=>{if(f[b]){const{array:d,config:g,oppositeArray:h,oppositeConfig:i,oppositeName:j}=f[b];if(d){const d=a[b];d.forEach(d=>{const f={updateOne:{filter:{_id:d},update:h?// eslint-disable-next-line no-underscore-dangle
{$push:{[j]:a._id}}:// eslint-disable-next-line no-underscore-dangle
{[j]:a._id}}},k=c.get(g);if(k?k.push(f):c.set(g,[f]),!h){const a=e.get(g);a?a[j]?a[j].oppositeIds.push(d):a[j]={array:!0,name:b,oppositeConfig:i,oppositeIds:[d]}:e.set(g,{[j]:{array:!0,name:b,oppositeConfig:i,oppositeIds:[d]}})}})}else{const d=a[b],f={updateOne:{filter:{_id:d},update:h?// eslint-disable-next-line no-underscore-dangle
{$push:{[j]:a._id}}:// eslint-disable-next-line no-underscore-dangle
{[j]:a._id}}},k=c.get(g);if(k?k.push(f):c.set(g,[f]),!h){const a=e.get(g);a?a[j]?a[j].oppositeIds.push(d):a[j]={array:!1,name:b,oppositeConfig:i,oppositeIds:[d]}:e.set(g,{[j]:{array:!1,name:b,oppositeConfig:i,oppositeIds:[d]}})}}}}),{core:c,periphery:e}};module.exports=processCreateInputData;