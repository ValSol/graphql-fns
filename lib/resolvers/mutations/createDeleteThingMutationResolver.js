const checkInventory=require("../../utils/checkInventory"),createThingSchema=require("../../mongooseModels/createThingSchema"),processDeleteData=require("./processDeleteData"),createDeleteThingMutationResolver=(a,b)=>{const{enums:c,inventory:d}=b,{name:e}=a;if(!checkInventory(["Mutation","deleteThing",e],d))return null;return async(b,f,g)=>{const{where:h}=f,{mongooseConn:i}=g,j=createThingSchema(a,c),k=i.model(e,j),l=Object.keys(h);if(1!==l.length)throw new TypeError("Expected exactly one key in where arg!");const m=h.id?{_id:h.id}:h,n=await k.findOne(m,null,{lean:!0});if(!n)return null;const{_id:o}=n;await k.findOneAndDelete({_id:o});const p=[],q=processDeleteData(n,a);if(q.forEach((a,b)=>{const{name:d}=b,e=createThingSchema(b,c),f=i.model(d,e);p.push(f.bulkWrite(a))}),await Promise.all(p),n.id=o,checkInventory(["Subscription","deletedThing",e],d)){const{pubsub:a}=g;if(!a)throw new TypeError("Context have to have pubsub for subscription!");// to prevent flowjs error
a.publish(`deleted-${e}`,{[`deleted${e}`]:n})}return n}};module.exports=createDeleteThingMutationResolver;