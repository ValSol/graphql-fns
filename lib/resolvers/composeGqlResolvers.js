const{DateTime}=require("@okgrow/graphql-scalars"),createThingQueryResolver=require("./queries/createThingQueryResolver"),composeThingResolvers=require("./types/composeThingResolvers"),createCreateThingMutationResolver=require("./mutations/createCreateThingMutationResolver"),createUpdateThingMutationResolver=require("./mutations/createUpdateThingMutationResolver"),createDeleteThingMutationResolver=require("./mutations/createDeleteThingMutationResolver"),composeGqlResolvers=a=>{const b={DateTime,Query:{},Mutation:{},Subscription:{}};return a.filter(({isEmbedded:a})=>!a).reduce((a,b)=>{const{name:c}=b,d=createThingQueryResolver(b);a.Query[c]=d;const e=createCreateThingMutationResolver(b);// eslint-disable-next-line no-param-reassign
a.Mutation[`create${c}`]=e;const f=createUpdateThingMutationResolver(b);// eslint-disable-next-line no-param-reassign
a.Mutation[`update${c}`]=f;const g=createDeleteThingMutationResolver(b);// eslint-disable-next-line no-param-reassign
return a.Mutation[`delete${c}`]=g,a},b),a.reduce((a,b)=>{const{name:c,relationalFields:d,duplexFields:e}=b;return(d||e)&&(a[c]=composeThingResolvers(b)),a},b),b};module.exports=composeGqlResolvers;