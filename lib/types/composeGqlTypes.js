const checkInventory=require("../utils/checkInventory"),createThingType=require("./createThingType"),createThingCreateInputType=require("./inputs/createThingCreateInputType"),createThingPaginationInputType=require("./inputs/createThingPaginationInputType"),createThingUpdateInputType=require("./inputs/createThingUpdateInputType"),createThingNearInputType=require("./inputs/createThingNearInputType"),createThingSortInputType=require("./inputs/createThingSortInputType"),createThingWhereInputType=require("./inputs/createThingWhereInputType"),createThingWhereOneInputType=require("./inputs/createThingWhereOneInputType"),createThingQueryType=require("./queries/createThingQueryType"),createThingsQueryType=require("./queries/createThingsQueryType"),createCreateThingMutationType=require("./mutations/createCreateThingMutationType"),createUpdateThingMutationType=require("./mutations/createUpdateThingMutationType"),createDeleteThingMutationType=require("./mutations/createDeleteThingMutationType"),createNewThingSubscriptionType=require("./subscriptions/createNewThingSubscriptionType"),createDeletedThingSubscriptionType=require("./subscriptions/createDeletedThingSubscriptionType"),createUpdatedThingSubscriptionType=require("./subscriptions/createUpdatedThingSubscriptionType"),createUpdatedThingPayloadType=require("./subscriptions/createUpdatedThingPayloadType"),composeEnumTypes=require("./specialized/composeEnumTypes"),composeGeospatialTypes=require("./specialized/composeGeospatialTypes"),composeGqlTypes=a=>{const{thingConfigs:b,inventory:c}=a,d=checkInventory(["Query"],c),e=checkInventory(["Mutation"],c),f=e&&checkInventory(["Subscription"],c),g=b.map(a=>createThingType(a)).join("\n"),h=e?b.reduce((a,b)=>{const{name:d}=b;// use ['Mutation', 'createThing'] not ['Mutation', 'updateThing', name] ...
// ... to let creation of children things of other types
if(checkInventory(["Mutation","createThing"],c)){const c=createThingCreateInputType(b);a.push(c)}if(checkInventory(["Mutation","updateThing",d],c)){const c=createThingUpdateInputType(b);a.push(c)}return a},[]).join("\n"):"",i=b.filter(({embedded:a})=>!a).reduce((a,b)=>{const{name:d}=b;if(checkInventory(["Query","thing",d],c)||checkInventory(["Mutation","updateThing",d],c)||checkInventory(["Mutation","deleteThing",d],c)){const c=createThingWhereOneInputType(b);a.push(c)}if(checkInventory(["Query","things",d],c)){const c=createThingWhereInputType(b);c&&a.push(c);const d=createThingSortInputType(b);d&&a.push(d);const e=createThingPaginationInputType(b);e&&a.push(e);const f=createThingNearInputType(b);f&&a.push(f)}return a},[]).join("\n"),j=d?b.filter(({embedded:a})=>!a).reduce((a,b)=>{const{name:d}=b;return checkInventory(["Query","thing",d],c)&&a.push(createThingQueryType(b)),checkInventory(["Query","things",d],c)&&a.push(createThingsQueryType(b)),a},[]).join("\n"):"",k=d?`type Query {
${j}
}`:"",l=e?b.filter(({embedded:a})=>!a).reduce((a,b)=>{const{name:d}=b;return checkInventory(["Mutation","createThing",d],c)&&a.push(createCreateThingMutationType(b)),checkInventory(["Mutation","updateThing",d],c)&&a.push(createUpdateThingMutationType(b)),checkInventory(["Mutation","deleteThing",d],c)&&a.push(createDeleteThingMutationType(b)),a},[]).join("\n"):"",m=e?`type Mutation {
${l}
}`:"",n=f?b.filter(({embedded:a})=>!a).reduce((a,b)=>{const{name:d}=b;return checkInventory(["Subscription","updatedThing",d],c)&&checkInventory(["Mutation","updateThing",d],c)&&a.push(createUpdatedThingPayloadType(b)),a},[]).join("\n"):"",o=f?b.filter(({embedded:a})=>!a).reduce((a,b)=>{const{name:d}=b;return checkInventory(["Subscription","newThing",d],c)&&checkInventory(["Mutation","createThing",d],c)&&a.push(createNewThingSubscriptionType(b)),checkInventory(["Subscription","updatedThing",d],c)&&checkInventory(["Mutation","updateThing",d],c)&&a.push(createUpdatedThingSubscriptionType(b)),checkInventory(["Subscription","deletedThing",d],c)&&checkInventory(["Mutation","deleteThing",d],c)&&a.push(createDeletedThingSubscriptionType(b)),a},[]).join("\n"):"",p=f?`type Subscription {
${o}
}`:"",q=["scalar DateTime"],r=composeEnumTypes(a);r&&q.push(r);const s=composeGeospatialTypes(a);return s&&q.push(s),q.push(g),h&&q.push(h),i&&q.push(i),n&&q.push(n),k&&q.push(k),m&&q.push(m),p&&q.push(p),q.join("\n")};module.exports=composeGqlTypes;