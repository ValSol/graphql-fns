const mongoose=require("mongoose"),{Schema}=mongoose,composeThingSchemaProperties=(a,b)=>{const{isEmbedded:c,duplexFields:d,embeddedFields:e,enumFields:f,geospatialFields:g,relationalFields:h,textFields:i}=a,j={};if(i&&i.reduce((a,{array:b,default:d,index:e,name:f,required:g,unique:h})=>{if(d){if(!b&&"string"!=typeof d)throw new TypeError("Expected a string as default value");if(b&&!Array.isArray(d))throw new TypeError("Expected an array as default value")}if((e||h)&&c)throw new TypeError("Must not have an \"index\" or \"unique\" field in an embedded document!");// eslint-disable-next-line no-param-reassign
// eslint-disable-line no-param-reassign
return a[f]={default:d||(b?[]:""),type:b?[String]:String},g&&(a[f].required=!!g),h&&(a[f].unique=!!h),e&&!h&&(a[f].index=!!e),a},j),h&&h.reduce((a,{array:b,config:{name:g},index:d,name:e,required:f})=>{if(d&&c)throw new TypeError("Must not have an \"index\" field in an embedded document!");const h={ref:g,type:Schema.Types.ObjectId};return f||(h.required=!!f),d&&(h.index=!!d),a[e]=b?[h]:h,a},j),d){if(c)throw new TypeError("Must not have an \"duplexField\" in an embedded document!");d.reduce((a,{array:b,config:{name:f},index:c,name:d,required:e})=>{// the same code as for relationalFields
const g={ref:f,type:Schema.Types.ObjectId};return e||(g.required=!!e),c&&(g.index=!!c),a[d]=b?[g]:g,a},j)}if(e&&e.reduce((a,{array:c,name:d,config:e})=>{const f=composeThingSchemaProperties(e,b);// eslint-disable-next-line no-param-reassign
return a[d]=c?[f]:f,a},j),g&&g.reduce((a,{array:b,name:c,required:d,type:e})=>{if("Point"===e){const e={type:{type:String,enum:["Point"]},coordinates:{type:[Number],index:"2dsphere"}};d&&(e.required=!!d),a[c]=b?[e]:e}else if("Polygon"===e){const e={type:{type:String,enum:["Polygon"]},coordinates:{type:[[[Number]]]}};d&&(e.required=!!d),a[c]=b?[e]:e}else throw new TypeError(`Invalid value "${e}" of geospatial field type!`);return a},j),f){const a=b.reduce((a,{name:b,enum:c})=>(a[b]=c,a),{});f.reduce((b,{array:d,default:e,index:f,name:g,required:h,enumName:i})=>{if(e){if(!d&&"string"!=typeof e)throw new TypeError("Expected a string as default value");if(d&&!Array.isArray(e))throw new TypeError("Expected an array as default value")}if(f&&c)throw new TypeError("Must not have an \"index\" field in an embedded document!");// eslint-disable-next-line no-param-reassign
// eslint-disable-line no-param-reassign
return b[g]={enum:a[i],type:d?[String]:String},h&&(b[g].required=!!h),f&&(b[g].index=!!f),void 0!==e&&(b[g].default=e),b},j)}return j};module.exports=composeThingSchemaProperties;