const mongoose=require("mongoose"),{Schema}=mongoose,composeThingSchemaProperties=a=>{const{embeddedFields:b,relationalFields:c,textFields:d}=a,e={};return d&&d.reduce((a,{array:b,default:c,name:d,required:e})=>{if(c){if(!b&&"string"!=typeof c)throw new TypeError("Expected a string as defalut value");if(b&&!Array.isArray(c))throw new TypeError("Expected an array as defalut value")}// eslint-disable-next-line no-param-reassign
return a[d]={default:c||(b?[]:""),type:b?[String]:String,required:!!e},a},e),c&&c.reduce((a,{array:b,name:c,required:d,config:{name:e}})=>{const f={ref:e,type:Schema.Types.ObjectId,required:!!d};// eslint-disable-next-line no-param-reassign
return a[c]=b?[f]:f,a},e),b&&b.reduce((a,{array:b,name:c,config:d})=>{const e=composeThingSchemaProperties(d);// eslint-disable-next-line no-param-reassign
return a[c]=b?[e]:e,a},e),e};module.exports=composeThingSchemaProperties;