const mongoose=require("mongoose"),{Schema}=mongoose,composeThingSchemaProperties=(a,b)=>{const{embedded:c,booleanFields:d,duplexFields:e,embeddedFields:f,enumFields:g,geospatialFields:h,relationalFields:i}=a,j=[{fieldTypeName:"textFields",mongoType:String},{fieldTypeName:"dateTimeFields",mongoType:Date},{fieldTypeName:"intFields",mongoType:Number},{fieldTypeName:"floatFields",mongoType:Number}],k=j.reduce((b,{fieldTypeName:d,mongoType:e})=>(a[d]&&a[d].forEach(({array:a,default:d,index:f,name:g,required:h,unique:i})=>{if(d){if(!a&&Array.isArray(d))throw new TypeError("Expected not an array as default value");if(a&&!Array.isArray(d))throw new TypeError("Expected an array as default value")}if((f||i)&&c)throw new TypeError("Must not have an \"index\" or \"unique\" field in an embedded document!");// eslint-disable-next-line no-param-reassign
b[g]={type:a?[e]:e},void 0!==d&&(b[g].default=d),h&&(b[g].required=!!h),i&&(b[g].unique=!!i),f&&!i&&(b[g].index=!!f)}),b),{});if(d&&d.reduce((a,{array:b,default:c,index:d,name:e,required:f})=>{if(c){if(!b&&Array.isArray(c))throw new TypeError("Expected not an array as default value");if(b&&!Array.isArray(c))throw new TypeError("Expected an array as default value")}// eslint-disable-next-line no-param-reassign
// eslint-disable-line no-param-reassign
return a[e]={type:b?[Boolean]:Boolean},void 0!==c&&(a[e].default=c),f&&(a[e].required=!!f),d&&(a[e].index=!!d),a},k),i&&i.reduce((a,{array:b,config:{name:g},index:d,name:e,required:f})=>{if(d&&c)throw new TypeError("Must not have an \"index\" field in an embedded document!");const h={ref:g,type:Schema.Types.ObjectId};return f||(h.required=!!f),d&&(h.index=!!d),a[e]=b?[h]:h,a},k),e){if(c)throw new TypeError("Must not have an \"duplexField\" in an embedded document!");e.reduce((a,{array:b,config:{name:f},index:c,name:d,required:e})=>{// the same code as for relationalFields
const g={ref:f,type:Schema.Types.ObjectId};return e||(g.required=!!e),c&&(g.index=!!c),a[d]=b?[g]:g,a},k)}if(f&&f.reduce((a,{array:c,name:d,config:e})=>{const f=composeThingSchemaProperties(e,b);// eslint-disable-next-line no-param-reassign
return a[d]=c?[f]:f,a},k),h&&h.reduce((a,{array:b,name:c,required:d,type:e})=>{if("Point"===e){const e={type:{type:String,enum:["Point"]},coordinates:{type:[Number],index:"2dsphere"}};d&&(e.required=!!d),a[c]=b?[e]:e}else if("Polygon"===e){const e={type:{type:String,enum:["Polygon"]},coordinates:{type:[[[Number]]]}};d&&(e.required=!!d),a[c]=b?[e]:e}else throw new TypeError(`Invalid value "${e}" of geospatial field type!`);return a},k),g){const a=b.reduce((a,{name:b,enum:c})=>(a[b]=c,a),{});g.reduce((b,{array:d,default:e,index:f,name:g,required:h,enumName:i})=>{if(e){if(!d&&"string"!=typeof e)throw new TypeError("Expected a string as default value");if(d&&!Array.isArray(e))throw new TypeError("Expected an array as default value")}if(f&&c)throw new TypeError("Must not have an \"index\" field in an embedded document!");// eslint-disable-next-line no-param-reassign
// eslint-disable-line no-param-reassign
return b[g]={enum:a[i],type:d?[String]:String},h&&(b[g].required=!!h),f&&(b[g].index=!!f),void 0!==e&&(b[g].default=e),b},k)}return k};module.exports=composeThingSchemaProperties;